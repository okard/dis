(*
Dis Programming Language
EBNF Syntax according ISO/IEC 14977 standard

*)

Package = 
    "package", DotIdentifier, { Declaration };

(*
    Declarations
*)

Declaration =
      ImportDeclaration
    | VariableDeclaration
    | ValueDeclaration
    | FunctionDeclaration
    | ClassDeclaration
    | TypeDeclaration
    | TraitDeclaration
    | StructDeclaration;

ImportDeclaration =
    "import", DotIdentifier, [".", "*"];

VariableDeclaration = 
    "var", Identifier, [":" TypeIdentifier], ["=" Expression];

ValueDeclaration =
    "val", Identifier, [":" TypeIdentifier], ["=" Expression];
    
FunctionDeclaration = 
    "def", {CallingConvention}, Identifier, [":" TypeIdentifier ], [FunctionDefinition]; 

FunctionDefinition =
      ("=", Statement)
    | BlockStatement;

CallingConvention = 
    "(", "C" | "Dis", ")";

ParameterDeclaration = Identifier, [":", TypeIdentifier];

StructDeclaration =
    "data", Identifier, StructBody;

StructBody =
    "{", { Declaration } "}";

ClassDeclaration =
    "obj", Identifier, ClassBody;

TraitDeclaration =
    "trait", Identifier, TraitBody;

TypeDeclaration =
    "type", Identifier, ( AliasDeclaration | EnumDeclaration | VariantDeclaration );

AliasDeclaration =
    TypeIdentifier;

EnumDeclaration =
    "=", "{", Identifier {",", Identifier }, "}";

VariantDeclaration =
    "=", TypeIdentifier, { "|", TypeIdentifier };

Block = 
    "{", {Declaration | Statement}, "}";

(*
    Statements
*)


Statement = 
      Expression
    | ForStatement
    | ForEachStatement
    | WhileStatement
    | DoWhileStatement;

(*
    Expressions
*)


Expression = 
    Literal
    | BinaryExpression 
    | IfExpression
    | SwitchExpression
    | CallExpression
    | "(" Expression ")"
    | LambdaExpression
    | IdentifierExpression;

Literal =
      "true"
    | "false"
    | "null"
    | NumberLiteral
    | StringLiteral;

BinaryExpression = 
    Expression, BinaryOperator, Expression;

BinaryOperator =
      "+"
    | "-"
    | "*"
    | "/"
    | "%"
    | "**"
    | "~"
    | "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="
    | "~="
    | "=="
    | "!="
    | "<"
    | ">"
    | "<="
    | ">=";


IfExpression = 
    "if", "(", Expression, ")", Expression | Statement | BlockStatement;


SwitchExpression = 
    "switch", "(", Expression, ")", SwitchBlock;

SwitchBlock = "{", "}";


CallExpression = 
    Expression, "(", {Expression}, ")";

(*
    Special
*)

TypeIdentifier =
      DotIdentifier
    | DotIdentifier, "!", "(", TypeIdentifier, {"," TypeIdentifier }, ")"
    | DotIdentifier, "[", [ Expression ], "]"
    | "def", "(", {TypeIdentifier}, ")", [":" TypeIdentifier ];
    
DotIdentifier = 
    ident, {".", ident};

Identifier= alpha, {alpha | digit};

digit = ;
alpha = ;

